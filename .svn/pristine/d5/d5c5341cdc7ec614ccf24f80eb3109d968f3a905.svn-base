package com.krt.api.controller.gov;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.krt.common.annotation.KrtIgnoreAuth;
import com.krt.common.bean.ReturnBean;
import com.krt.common.bean.ReturnCode;
import com.krt.gov.common.constant.CommonApiConst;
import com.krt.gov.common.service.MessageService;
import com.krt.gov.device.entity.GovDevice;
import com.krt.gov.device.service.IGovDeviceService;
import com.krt.gov.smsLog.service.IGovSmsLogService;
import com.krt.gov.strategy.service.CallBackService;
import com.krt.gov.strategy.service.IDeviceStrategyRequireService;
import com.krt.gov.strategy.service.IGovPushStrategyService;
import com.krt.gov.warning.service.IGovDeviceWarningService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringEscapeUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.*;

/**
 * @author krt
 */
@Slf4j
@RestController
@RequestMapping("api/callback")
@Api(tags = "6、数据接收处理接口")
public class DataProcessApi {

    private static final Long PRODUCT_ID_SENSOR = 831566435745240L;
    private static final Long PRODUCT_ID_SWITCH = 831566435686360L;

    private static final Integer CMD_SWITCH = 20;
    /**
     * 热敏打印机
     */
    private static final Integer CMD_Thermal_Printer = 30;

    /**
     * 终端汇报电表信息
     */
    private static final Integer CMD_Ammeter_Report = 24;

    @Autowired
    private IGovDeviceWarningService govDeviceWarningService;

    @Autowired
    private IDeviceStrategyRequireService strategyRequireService;

    @Autowired
    private IGovDeviceService deviceService;

    @Autowired
    private CallBackService callBackService;

    @Autowired
    private MessageService messageService;

    @Autowired
    private IGovPushStrategyService govPushStrategyService;

    @Autowired
    private IGovSmsLogService govSmsLogService;

    @KrtIgnoreAuth
    @PostMapping("data")
    @ApiOperation(value = "数据回调", notes = "Post方法")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", dataType = "String", name = "topicName", value = "主题名称", required = true),
            @ApiImplicitParam(paramType = "query", dataType = "String", name = "topicContent", value = "主题内容", required = true)
    })
    public ReturnBean data(
            @RequestParam("topicName") String topicName,
            @RequestParam("topicContent") String topicContent) {
        try {

            if (topicName.endsWith(CommonApiConst.STATE_LINE)) {
                JSONObject t = JSONObject.parseObject(topicContent);
                Long deviceId = Long.valueOf(String.valueOf(t.getLong("deviceId")));
                Integer state = Integer.valueOf(String.valueOf(t.getInteger("state")));

                //更新设备状态
                GovDevice device = new GovDevice();
                device.setDeviceId(deviceId);
                device.setState(state);
                deviceService.updateStateByDeviceId(device);

                //电表设置
                List<GovDevice> deviceList = deviceService.selectList(new QueryWrapper<GovDevice>().eq("device_id", deviceId));
                List<String> list = new ArrayList<>();
                for (GovDevice govDevice :
                        deviceList) {
                    //判断是否是电表
                    if ("DLT".equals(govDevice.getPort())){
                        list.add(govDevice.getMeter());
                    }
                }

                if (list.size()>0){
                    JSONObject jsonObject = new JSONObject();
                    jsonObject.put("CMD",23);
                    jsonObject.put("MODE","DLT645");
                    jsonObject.put("ID",deviceId+System.currentTimeMillis());
                    jsonObject.put("VER",0);
                    jsonObject.put("TIME",600);
                    jsonObject.put("NUM",list.size());
                    jsonObject.put("METER",list);
                    jsonObject.put("AVOL",1);
                    jsonObject.put("ACUR",1);
                    jsonObject.put("ENERGY",1);
                    jsonObject.put("PKWH",1);
                    jsonObject.put("NKWH",1);
                    jsonObject.put("PFC",1);
                    jsonObject.put("TEM",1);
                    jsonObject.put("BAT",1);
                    return ReturnBean.ok(jsonObject);
                }

                return ReturnBean.ok();
            }
            if (topicName.endsWith(CommonApiConst.STATE_STOP)) {
                deviceService.offLineAllDevice();
                return ReturnBean.ok();
            }

            String[] segName = topicName.split("/");
            Long productId = Long.valueOf(segName[2]);
            Long deviceId = Long.valueOf(segName[3]);

            topicContent = StringEscapeUtils.unescapeHtml4(topicContent);
            log.info("接收数据：" + topicContent);
            JSONObject jsonObject = JSONObject.parseObject(topicContent);

            if (PRODUCT_ID_SENSOR.equals(productId)) {
                Integer temp = Double.valueOf(jsonObject.getString("TEM")).intValue();
                Integer humi = Double.valueOf(jsonObject.getString("HUM")).intValue();
                /**
                 *  预警
                 */
                List<Map> warnings = govDeviceWarningService.selectWarningPhoneInfo(deviceId, temp, humi);
                for (int i = 0; i < warnings.size(); i++) {
                    Map map = warnings.get(i);
                    String staffPhone = map.get("staffPhone") + "";
                    String smsMode = map.get("smsMode") + "";
                    String deviceName = map.get("deviceName") + "";
                    smsMode = smsMode.replace("${temp}", temp.toString() + "℃");
                    smsMode = smsMode.replace("${humi}", humi.toString() + "%RH");
                    smsMode = smsMode.replace("${name}", deviceName);
//                        messageService.sendMsg(staffPhone, smsMode);

                    //每发送一条短信，就往历史推送短信表中插入一条记录
                    Integer warningId = Integer.parseInt(map.get("warningId") + "");
                    String staffName = map.get("staffName") + "";
                    govSmsLogService.addSmsLog(1, warningId, staffPhone, smsMode, staffName);
                }

                /**
                 * 更改设备状态
                 * 满足预警的前置条件设备，status修改状态为2,。如果不满足预警条件，当前设备status又为2，说明预警结束，修改status为action中onOff的开关状态
                 */
                deviceService.changeAirConditioningStatus(deviceId, temp, humi);

                /**
                 *  条件策略
                 */
                //空调执行操作
                List<Map> airConditionerStrategyAction = strategyRequireService.getAirConditionerStrategyActionByTH(deviceId, temp, humi);
                callBackService.ac(airConditionerStrategyAction);
                Set<Integer> set = new HashSet();
                for (Map map :
                        airConditionerStrategyAction) {
                    set.add(Integer.parseInt(map.get("id") + ""));
                }

                //开关执行操作
                List<Map> switchStrategyAction = strategyRequireService.getSwitchStrategyActionByTH(deviceId, temp, humi);
                callBackService.swt(switchStrategyAction);
                for (Map map :
                        airConditionerStrategyAction) {
                    set.add(Integer.parseInt(map.get("id") + ""));
                }
                for (Integer id :
                        set) {
                    govPushStrategyService.sendPushMessage(id);
                }

                /**
                 *  保存设备数据
                 */
                deviceService.updateDataByDeviceId(deviceId, topicContent);
            } else if (PRODUCT_ID_SWITCH.equals(productId)) {
                Integer CMD = jsonObject.getInteger("CMD");
                if (CMD_SWITCH.equals(CMD)) {
                    JSONArray in = jsonObject.getJSONArray("IN");
                    Integer port1 = in.getInteger(0);
                    Integer port2 = in.getInteger(1);
                    Integer port3 = in.getInteger(2);
                    Integer port4 = in.getInteger(3);
                    Integer port5 = in.getInteger(4);
                    deviceService.updateStatusByDeviceId(deviceId, port1, port2, port3, port4, port5);

                    /**
                     * 预警
                     */
                    List<Map> warningPhone = govDeviceWarningService.getWarningPhoneBySwitch(deviceId + "", port1, port2, port3, port4, port5);
                    for (int i = 0; i < warningPhone.size(); i++) {
                        Map map = warningPhone.get(i);
                        String staffPhone = map.get("staffPhone") + "";
                        String smsMode = map.get("smsMode") + "";
                        String deviceName = map.get("deviceName") + "";
                        Integer power = Integer.parseInt(map.get("power") + "");
                        smsMode = smsMode.replace("${name}", deviceName);
                        if (power == 1) {
                            smsMode = smsMode.replace("${power}", "打开");
                        }
                        if (power == 0) {
                            smsMode = smsMode.replace("${power}", "关闭");
                        }
//                            messageService.sendMsg(staffPhone, smsMode);
                        //每发送一条短信，就往历史推送短信表中插入一条记录
                        Integer warningId = Integer.parseInt(map.get("warningId") + "");
                        String staffName = map.get("staffName") + "";
                        govSmsLogService.addSmsLog(1, warningId, staffPhone, smsMode, staffName);

                    }

                    /**
                     * 更改设备状态
                     * 满足预警的前置条件设备，status修改状态为2,。如果不满足预警条件，当前设备status又为2，说明预警结束，修改status为action中onOff的开关状态
                     */
                    deviceService.changeSwitchStatus(deviceId, port1, port2, port3, port4, port5);

                    /**
                     * 条件策略
                     */
                    //空调执行操作
                    List<Map> airConditionerStrategyAction = strategyRequireService.getAirConditionerStrategyActionBySwitch(deviceId + "", port1, port2, port3, port4, port5);
                    callBackService.ac(airConditionerStrategyAction);
                    Set<Integer> set = new HashSet();
                    for (Map map :
                            airConditionerStrategyAction) {
                        set.add(Integer.parseInt(map.get("id") + ""));
                    }
                    //开关执行操作
                    List<Map> switchStrategyAction = strategyRequireService.getSwitchStrategyActionBySwitch(deviceId + "", port1, port2, port3, port4, port5);
                    callBackService.swt(switchStrategyAction);
                    for (Map map :
                            airConditionerStrategyAction) {
                        set.add(Integer.parseInt(map.get("id") + ""));
                    }
                    for (Integer id :
                            set) {
                        govPushStrategyService.sendPushMessage(id);
                    }
                } else if (CMD_Thermal_Printer.equals(CMD)) {
                    //接收热敏打印机数据
                    JSONObject jo = JSONObject.parseObject(topicContent);
                    if (jo.get("MACHINE") != null) {
                        String machine = jo.get("MACHINE") + "";
                        GovDevice govDevice = new GovDevice();
                        govDevice.setMachine(machine);
                        govDevice.setDeviceId(deviceId);
                        govDevice.setData(topicContent);
                        Integer rs = deviceService.updatePrinterInfo(govDevice);
                        if (rs == 1) {
                            return ReturnBean.ok();
                        } else {
                            ReturnCode rc = ReturnCode.INVALID_REQUEST;
                            rc.setMsg("deviceId和MACHINE不匹配");
                            return ReturnBean.error(rc);
                        }
                    } else {
                        ReturnCode rc = ReturnCode.INVALID_REQUEST;
                        rc.setMsg("MACHINE未指定");
                        return ReturnBean.error(rc);
                    }
                } else if (CMD_Ammeter_Login.equals(CMD)) {
                    //电表设备登录
                    IdentityHashMap map = new IdentityHashMap();
                    JSONObject object = JSONObject.parseObject(topicContent);
                    object.put("ONOFF", 1);
//                    map.put(new String("productId"), device.getProductId());
//                    map.put(new String("deviceId"), device.getDeviceId());
//                    map.put(new String("topicName"), TopicNameUtil.cmdSet(Long.valueOf(String.valueOf(device.get("productId"))), Long.valueOf(String.valueOf(device.get("deviceId")))));
                    map.put(new String("topicContent"), object);
                }  else if (CMD_Ammeter_Report.equals(CMD)) {
                    //终端汇报电表信息
                    JSONObject JO = JSONObject.parseObject(topicContent);
                    String machine = JO.get("METER") + "";
                    deviceService.updateDataByMachine(topicContent, machine);
                }
            }
        } catch (Exception e) {
            log.info(e.getMessage());
            e.printStackTrace();
        }
        return ReturnBean.ok();
    }

    @KrtIgnoreAuth
    @PostMapping("state")
    @ApiOperation(value = "状态回调", notes = "Post方法")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", dataType = "Long", name = "deviceId", value = "设备主键", required = true),
            @ApiImplicitParam(paramType = "query", dataType = "Long", name = "state", value = "在线状态", required = true)
    })
    public ReturnBean state(
            @RequestParam("deviceId") Long deviceId,
            @RequestParam("state") Integer state) {
        GovDevice device = new GovDevice();
        device.setDeviceId(deviceId);
        device.setState(state);
        deviceService.updateStateByDeviceId(device);
        return ReturnBean.ok();
    }

    @KrtIgnoreAuth
    @PostMapping("stop")
    @ApiOperation(value = "终止回调", notes = "Post方法")
    public ReturnBean stop() {
        deviceService.offLineAllDevice();
        return ReturnBean.ok();
    }
}
